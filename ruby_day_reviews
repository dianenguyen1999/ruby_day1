# single line code

# /*
# This 
# is
# a 
# multi line
# comment
# */

# # This 
# # is
# # a 
# # multi line
# # comment

# # Datatypes
# String
#     'String'
#     "String"
#     "1" #string because it is in a quote
#     # 'Not a string" 
#     # can have one quote or two quotes

# Integer
#     1 23 100 0 -11 -11
# # any whole numbers 
# Boolean
#     true 
#     false
#     1 #true
#     0 #false
#     # 'true' - not a boolean
#     # true and false values
# Array 
#     [ ]
#     Array.new ()
#     [ 'hi', 1 true ]
# Hash 
#     # always has a key and a value
#     # first_name is key and 'Diane' is the string value.
#     { key: value }
#     { first_name: 'Diane' } 
#     Hash.new {} 
# Float 
#     # decimal value
#     3.12 1.22323

# nil - does exist, nothing assigned to it, no value.  
#  # { first_name: }
#  # { first_name: nil } # no value

# undefined
# is not created yet

# Object
#  class

#  end


# String
# Integer
# Boolean
# Floats
# Array
# Hash
# nil
# undefined
# Object

# ***VARIABLES***
# Consider variables as references, or storage.
# = assignment 
# 3 parts
# 1                2         3
# name_of_variable = whatever_the_variable_is_assigned_to
# best practice to be desciptive when you name your variables

# string_variable = "string"   #ANY DATATYPE YOU WANT. 
# "string" = "string" - not valid 

# will add 1 and 25 = 26
# product = (1 * 25) + 32
# +
# -
# *
# /
# % (moduels) will divide the left and right side and return the remainder
    # 2 % 1  --> 0 (what it will display) 
# Math.e
# Math.pi
# Match.exponenet
# THIS FOLLOWS PEMDAS 
# When we use 

# product = "1" + "25"
# string concatenation  essentially putting two strings into one bigger string. 
# city = "salt" + "lake" + 'city'
# vacation = "Bali" + "India" + "fun"

# puts vacation
 #ruby runs from top to bottom, so since i ran puts first_name it is going to show Diana
# first_name = 'Diane'
# first_name  = 'Diana'
# # reassignment
# first_name = 0
# first_name = 'Carl'

# puts first_name
***VARIABLES***


# ****VARIABLE TYPES****
    #scope ~ where you have access to a variable 

#CONSTANT 
    #anything upper case
    # Foo = 'const var'
    # first letter is capitalized
    # scope to the file
    #can change the variable, but shouldn't change them.

# LOCAL
    #anything lower case
    # first_name = 'diane'
    # scope to a code block

    # def method
    # first_name = 'diane'
    # end

# INSTANCE 
    #anything with @ sign
    # @first_name = 'diane'
    # scope within class or a running instance
    # class Person
    #     @wallet = 2.30
    # end


    # @bob = Person.new

# CLASS
    # has two @ signs
    # @@lastname = 'diane'
    # scope with the class and the file

    # class Person
    #     @@lastname = 'diane'
    # end

# GLOBAL #WARNING DO NOT USE
    # $foo = 1
    # scope whole machine

    # Foo = 'Constant'
    # @foo = 'Instance'
    
    # def print_foo
    #     foo = 'local'
    #     puts Foo
    #     puts foo
    #     puts @foo
    # end

    # print_foo
# ****VARIABLE TYPES****


# ***METHODS*** (all methods have an end, they help group code together)
    # group code together
    # 1 task for each method
    # last line is return if there is no return
    # always reutrns a value

        # def sum (num1, num2)
        # return num1 + num2
        # puts 'hello'
        # end
        
# ***METHODS***                 


# def print_name
#     puts 'bob ross'
# end

# # to use a method, call it by its name
# print_name
#                         #params or arg
# def print_someones_name(first_name, last_name)
#     puts "Hello #{first_name}, #{last_name}"
#                 # Ric           #Flair
# end


# "#{}"
# string interpolation 
#  " " (has to be in double quotes) (bringing values from paramenter or variable)

# print_someones_name('Ric', 'Flair')

# = 
#     - ASSIGNMENT (math means equality)

# == 
#     - EQUALITY OF VALUE
# 4 == '4' true 
# 3 == '4' false (not the same value)


# === 
#     - EQUALITY OF VALUE AND TYPE
# 4 === '4' false ('4' is a string and 4 is an integer)

# != 
#     - not equal of value

# !== 
#     - not equal of value and type

# &&
#      - and 

# ||
#      - or

# "burger" && "fries" #AND
# "burger" || "fries" #OR 

# "burger" && "fries" || "salad" && "Drink"
# "burger" && ("fries" || "salad") && "Drink"

# INPUT
# print 'Type in your first name:'
#    user_first_name = gets 

#         # grab user input 
#     puts "hello #{user_first_name}" #string interpolation 

#     puts 'Type in your last name:'
#     user_last_name = gets

#     puts "#{user_last_name}"

# puts 'type one number'
# num1 = gets.to_i

# puts 'type nubmer for 2'
# num2 = gets.to_i

# puts 'What do you want to do with those number?'
# user_answer = gets.strip

# # if user_answer === 'add'
# #    puts num1 + num2
# else if user_answer === 'subtract'
#     puts num1 - num2 
# else if user_answer === 'multiply'
#     puts num1 * num2
# else
#     puts 'please try again'
# # end

# OUTPUT 
    # - displaying something to the terminal 
    # - puts 'hi'
    #     - new line
    # - print 'hi'
    #     - same line
    # - p 'hi'
    #     - same line, display the Datatype

# ***CONDITIONALS***
#     #Does one thing or the other or non of the code blocks

#     # if, else if, else
#     # case
#     # ternary
#     # unless

#     # if x== true
#     #     puts x
#     # end

# if user_answer === 'add'
#     puts num1 + num2
# else if user_answer === 'subtract'
#     puts num1 - num2 
# else if user_answer === 'multiply'
#     puts num1 * num2
# else
#     puts 'please try again'
#  end

# ***CONDITIONALS***



# ***CASE***
# case user_answer
#     when 'add'
#         puts num1 + num2
#     when 'subtract'
#         puts num1 - num2
#     else
#         puts 'please try again'
# end
# ***CASE***


# ***TERNARY*** 
# if num1 % 2 == 0 
#     a = true
# else
#     a = false
# end

# assignment = condition ? if : else  
# a = num1 % 2 == 0 ? true : false

# unless num1 % 2 == 0
#     puts 'is even'
# end
# ***TERNARY*** 


# ***LOOP*** (make sure it evaulates to a value)
# to get out of a loop ctrl + c
#infinte loop, loop that runs until you run out of memory or battery. 
# doing the code in the loop until a condition is met. (all work the same way)
#tautilogical means it is always true.
#as long as it's true, the output will loop hi.
    # while  true
    # while 'yes' === 'yes
    # contradiction  means it is always false
    # while false
    # while 1 === 2

#contingency (something that is not always true or always false)

# x=0
# while x <= 3
#     x += 1
#     puts x
# end

# ***NESTED LOOP***
# x=0
# while x <= 3
#     x+= 1
#     puts x
#     for y in (0..5)
#         puts y
#     end
# end


# until x > 3
#     puts x
#     x +=1
# end

# for x in (0..3)
#     puts x
# end

# (0..3). each do |number|
#     puts number
# end

# (0..3).each { |x| puts x }

# arr = [1, 2, 3]
# *arr.map { |num| puts num }

# arr.select { |num| puts num }

# arr.select { |num| num % 2 == 0 }
# # [ 2 ]

# arr.reject { |num| num % 2 == 0 }
# #[ 1, 3 ]

# arr.reduce (&:+)
# 6

# ***LOOPS***

# ***KEYWORDS***
# next ( go to the next line of execution)
#break (take you out of out of code block)
# retry (retry the last execution)

gets.to_i # use inpit change into a number
gets.to_s # user input change into a string
gets.to_f # user input change into a float






